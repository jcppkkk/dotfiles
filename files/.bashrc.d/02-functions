#!/bin/bash
PATH_add() {
    if [[ -d "$1" ]] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="$1${PATH:+":$PATH"}"
    fi
}

patch_function() {
    local func_name=$1
    local append_line=$2

    # 取得原始函數定義
    local original_function
    original_function=$(declare -f "$func_name")

    # 檢查是否已經包含要附加的行
    if [[ $original_function != *"$append_line"* ]]; then
        # 在結束大括號前附加新行
        eval "$(echo "$original_function" | sed -e "/^}$/i$append_line")"
    fi
}

# 定義一個函數來切換（抑制或恢復）指定的函數，並設置 umask
toggle_function() {
    local func_name=$1
    local toggle_file="/tmp/${func_name}_toggle"
    local original_umask
    original_umask="$(umask)"

    # 設置 umask 0077 來保護文件
    umask 0077

    if declare -f "$func_name" >/dev/null; then
        if [ -f "$toggle_file" ]; then
            # 如果 toggle_file 存在，則恢復函數
            eval "$(cat "$toggle_file")"
            rm "$toggle_file"
            echo "函數 '$func_name' 已恢復。"
        else
            # 如果 toggle_file 不存在，則抑制函數
            local func_def
            func_def=$(declare -f "$func_name")
            echo "$func_def" >"$toggle_file"
            eval "$func_name() { :; }"
            echo "函數 '$func_name' 已被抑制。"
        fi
    else
        echo "函數 '$func_name' 不存在。"
    fi

    # 恢復原始 umask
    umask "$original_umask"
}

# 添加 Bash 命令補全功能
_toggle_function_completions() {
    tput sc
    #local cur_word="${COMP_WORDS[COMP_CWORD]}"
    local functions_list
    mapfile -t functions_list < <(declare -F | awk '{print $3}')

    # 使用 percol 讓使用者選擇函數
    local selected_function
    selected_function="$(printf "%s\n" "${functions_list[@]}" | percol)"
    # 將選擇的函數作為補全結果
    COMPREPLY=("$selected_function")
    tput rc
}

complete -F _toggle_function_completions toggle_function
