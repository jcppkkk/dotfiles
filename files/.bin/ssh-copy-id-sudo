#!/bin/bash
# ssh-copy-id-sudo: like ssh-copy-id but copy public key to root space
# usage: ssh-copy-id-sudo user@host

#!/bin/bash

# Check if the user provided a hostname
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 user@hostname"
    exit 1
fi

# Extract the username and hostname
USER_HOST="$1"
HOSTNAME=$(echo "$USER_HOST" | cut -d'@' -f2)

# Check for an existing SSH key, generate one if not found
if [ ! -f "$HOME/.ssh/id_rsa.pub" ]; then
    echo "SSH key not found, generating one..."
    ssh-keygen -t rsa -b 2048
fi

# Read the public SSH key
PUB_KEY=$(cat "$HOME/.ssh/id_rsa.pub")

# Copy the SSH public key using ssh and sudo to append it to the root's authorized_keys
# Only if it's not already present
ssh -t "$USER_HOST" "sudo sh -c '\
    mkdir -p /root/.ssh && \
    touch /root/.ssh/authorized_keys && \
    chmod 600 /root/.ssh/authorized_keys && \
    grep -q -F \"$PUB_KEY\" /root/.ssh/authorized_keys || echo \"$PUB_KEY\" >> /root/.ssh/authorized_keys \
'"

# shellcheck disable=SC2181
if [ $? -eq 0 ]; then
    echo "SSH key successfully processed for $HOSTNAME root."
else
    echo "Failed to process SSH key for $HOSTNAME root."
fi
