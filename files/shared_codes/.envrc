#!/bin/bash
#
# Install https://direnv.net/ to load this file automatically
#

# Hook pre-commit
if [[ -f .pre-commit-config.yaml ]] \
    && command -v pre-commit &>/dev/null \
    && ! grep -q pre-commit .git/hooks/pre-commit; then
    echo "direnv: initializing pre-commit"
    pre-commit install
fi

if [[ -f init-repo ]]; then
    ./init-repo
fi

if [[ -d .envrc.d ]]; then
    # Load all .envrc files in .envrc.d directory, guard against sourcing errors.
    for file in .envrc.d/*.sh; do
        source_env_if_exists "$file"
    done
fi

# Config git .env sanitize
if [[ -f .env ]]; then
    chmod -c 0600 .env
    # Load .env file
    dotenv .env

    # Configure git filter to store and restore env values
    clean_filter_fn() {
        sed -E -e "/^[^#=]+=/s/=.*/=/" -
        exec >/dev/null 2>&1
        # shellcheck disable=SC2046
        set -a
        if [[ -f .env-store ]]; then
            # shellcheck source=/dev/null
            source .env-store
        fi

        # shellcheck disable=SC1090
        source <(sed -E -n "/^[^#]+=[^ ]+/p" .env)
        export -p | grep "declare -x" | sed -E -e "s/^declare -x //" -e "/^PWD=|^SHLVL=|^OLDPWD$/d" >.env-store
        chmod 0600 .env-store
    }
    # shellcheck disable=SC2016
    clean_filter="env -i bash -c  '$(declare -f clean_filter_fn); clean_filter_fn'"

    smudge_filter_fn() {
        # shellcheck disable=SC2016
        if [[ -f .env-store ]]; then
            set -a
            # shellcheck source=/dev/null
            source .env-store
            set +a
        fi
        while IFS= read -r line; do
            if echo "$line" | grep -qE '^[^#=]+='; then
                key=$(echo "$line" | cut -d= -f1)
                echo "$key=${!key}"
            else
                echo "$line"
            fi
        done
    }
    smudge_filter="bash -c '$(declare -f smudge_filter_fn); smudge_filter_fn'"

    if [[ $(git config --get filter.sanitize-env.clean) != "$clean_filter" ]]; then
        echo "direnv: configuring git filter for .env"
        git config filter.sanitize-env.clean "$clean_filter"
    fi
    if [[ $(git config --get filter.sanitize-env.smudge) != "$smudge_filter" ]]; then
        echo "direnv: configuring git filter for .env"
        git config filter.sanitize-env.smudge "$smudge_filter"
    fi

    if ! grep "^/.env" .gitattributes &>/dev/null; then
        echo "/.env filter=sanitize-env" >>.gitattributes
    fi

    # Remove unused .env files from .gitignore
    sed -E -i '/^\/\.env$|^\/\.env-store$/d' .gitignore

    # Add .env-store to .gitignore if not already present
    if ! grep "^/.env-store\*$" .gitignore &>/dev/null; then
        echo "/.env-store*" >>.gitignore
    fi
fi

# Load python environment
if [[ -f uv.lock ]] && command -v mise &>/dev/null; then
    # Setup mise to load uv venv
    export MISE_PYTHON_UV_VENV_AUTO=true
elif [[ -f pyproject.toml ]] && command -v poetry &>/dev/null && grep -q poetry pyproject.toml; then
    log_status "loading Poetry"

    if ! direnv_load poetry run direnv dump; then
        log_error "failed to enter Poetry env, do you need 'poetry install'?"
        return 2
    fi
elif [[ -f Pipfile ]]; then
    echo "direnv: loading Pipenv"
    layout pipenv
fi
