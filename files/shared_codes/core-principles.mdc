---
description:
globs:
alwaysApply: true
---
# 規則主從關係聲明
root: true
scope: global
dependencies: []
extends: null

# 一、最高原則與衝突處理
1. 本文件（core-principles.mdc）為全域最高原則，所有子規則、專案規則、實作規則僅能擴展，不得違背。
2. 當不同層級規則內容發生衝突時，一律以本文件為準。
3. 子規則、專案規則如因特殊需求需例外，必須於規則檔案中明確說明例外原因、範圍及適用情境，否則視為無效。
4. 若規則內容已於本節說明，其他段落可省略重複描述，僅於特殊情境補充。

# 二、規則結構與分層
## 2.1 規則分層
1. 規則分為核心層（本文件）、專案層、實作層。
2. 子規則文件必須在其元數據中聲明主從關係。
3. 子規則可以擴展但不能違背核心原則。

## 2.2 規則說明與類型
1. 本文件為全域性原則，適用於所有專案與技術棧。
2. 當規則內容明確針對某一程式語言時，應獨立建立對應的規則檔案。
3. 語言專屬規則檔案應與全域性原則分開存放。
4. 每個語言可建立一份或多份專屬規則檔案，檔名建議格式為：`<language>-rules.mdc`。
5. 若規則為跨語言通用規則，`alwaysApply` 應設為 `true`；若為語言專屬規則，則 `globs` 指定對應語言的常用副檔名。
6. 規則文件可通過不同方式被觸發和使用，詳見 alwaysApply 屬性說明。

## 2.3 新增與修訂規則之結構原則
1. 新增或修訂規則時，必須以條列式分明呈現，避免冗餘，提升可讀性與維護性。
2. 應簡化或移除重複語句，僅保留必要說明，讓架構更精簡有系統。
3. 對於重複或分散的描述，應主動整合於單一明確條列，避免資訊分散。

# 三、自動化與執行原則
## 3.1 規則檔案管理與自動化原則
1. 所有規則檔案（如 .mdc、規則 YAML 等）必須統一存放於 `.cursor/rules/` 目錄下，不得散落於其他路徑。
2. 所有規則檔案必須以 .mdc 為副檔名，且不得重名。
3. 子規則檔案必須於 frontmatter 或內容中標註其主規則。
4. AI/自動化工具在自動化或更新規則時，僅能操作 .mdc 檔案。
5. 若有規則檔案誤放於其他路徑，AI/自動化工具應自動搬移至 `.cursor/rules/`，並於回報中說明調整內容。
6. 當 AI 或自動化工具根據規劃、分析、或用戶明確指示（如「全部」、「全自動」、「一鍵」、「split」、「refactor all」等），完成規則或流程規劃後，應自動執行必要的修正、調整或重構步驟。
7. 所有自動修正應於回應中主動明確回報所有已完成的修正內容。

## 3.2 問句與多目標自動化原則
1. 當使用者以問句詢問某項變更的可行性，且經分析後確認該變更可行時，AI/自動化工具應直接執行該變更。
2. 當使用者於同一指令、提問或需求中明確列出多個重構、修改、優化等目標時，AI/自動化工具應一次性完成所有目標的實作與回報。
3. 執行結果應於回應中明確列出所有已完成的目標與對應調整內容。
4. 當使用者提出明確的修正、重構、優化等請求時，AI/自動化工具應直接執行並回報結果。
5. 僅當該請求存在多種明顯不同的實做方式時，AI/自動化工具可先簡要說明選項並詢問用戶偏好，待確認後再執行。
6. AI/自動化工具在執行任何修正、重構、優化等請求時，嚴禁產生『正確寫法』與『修正範例』等內容，必須直接執行修改並回報已完成的調整內容。

## 3.3 規則演進與持續改進
1. 持續觀察、分析、整合各專案最佳實踐，定期評估與優化規則內容。
2. 建立回饋機制，收集開發者意見，根據實際需求更新規則。
3. 每當有原則更新時，應主動檢視、調整現有規則或專案程式碼以符合新原則，並於回應中說明已完成的調整。
4. 若 AI 或自動化工具偵測到規則需分離、搬移、重構等明確需求時，應自動執行調整，無須等待用戶確認，並於回應中主動說明已完成的調整。

# 四、開發與文件規範
## 4.1 通用開發規範
1. 可讀性：程式碼應該易於理解和維護。
2. 一致性：遵循專案既定的編碼風格。
3. 模組化：功能應該適當分離和組織。
4. 可測試性：程式碼應該易於測試。
5. 文件應與程式碼同步更新，包含必要的使用說明和範例，結構清晰且易於維護。
6. 明確的提交訊息：每個提交都應該清楚說明變更內容和原因。
7. 適當的分支策略：依據專案需求選擇合適的分支模型。

## 4.2 文件在地化原則
1. 程式碼註解所用之語言應與同檔案內其他註解相同，或使用專案預設語言。
2. 非程式修改之回應應使用 zh_TW 繁體中文。
3. 技術名詞、標準術語、日誌級別、異常類別名稱、程式碼識別符等可例外使用英文。
