#!/bin/bash
# vim: set et fenc=utf-8 ff=unix sts=4 sw=4 ts=8 :
if [[ $EUID -eq 0 ]]; then
    echo "This script must NOT be run as root" 1>&2
    exit 1
fi
cd "$(dirname "$0")" || exit
here=$(pwd)

cd setup.d || exit 1
run-parts -v --exit-on-error --regex='[0-9][0-9]-*' .

if true; then
    exit
fi
# setup env and location
source files/.bashrc.d/get-platform
source /etc/lsb-release

function install_pkg() {
    if ! _install_pkg "$@"; then
        update_pkg_list
        _install_pkg "$@"
    fi
}

ubuntu_apt_update() {
    LOG_FILE="/var/log/apt/history.log"
    if [[ ! -f "$LOG_FILE" ]]; then
        return
    fi
    LAST_UPDATE=$(grep -m 1 "Start-Date" "$LOG_FILE" | awk '{print $2, $3}')
    if [[ -z "$LAST_UPDATE" ]]; then
        echo "未找到 apt update 的執行記錄。"
        return
    fi
    LAST_UPDATE_TIMESTAMP=$(date -d "$LAST_UPDATE" +%s)
    CURRENT_TIMESTAMP=$(date +%s)
    SECONDS_SINCE_LAST_UPDATE=$((CURRENT_TIMESTAMP - LAST_UPDATE_TIMESTAMP))
    if [[ $SECONDS_SINCE_LAST_UPDATE -gt 86400 ]]; then
        echo "已超過一天未執行 apt update。"
        sudo apt-get update
    fi
}
case $platform in
    'linux')
        check_pkg() { dpkg -s "$1" >/dev/null 2>&1; }
        # aptitude can solve depenency problem for clang-*
        _install_pkg() { sudo apt-get install -y "$@"; }
        update_pkg_list() { ubuntu_apt_update; }
        # setup aptitude first
        install_pkg aptitude
        _install_pkg() { sudo aptitude install -y "$@"; }
        ;;
    'mac')
        check_pkg() { brew list -1 | grep -q "^${1}\$"; }
        _install_pkg() { brew install "$@"; }
        update_pkg_list() { :; }
        if ! brew help >/dev/null; then
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        fi
        ;;
esac

#######################
## install packages on new machine
#######################

packages=(git dos2unix wget curl)

case $platform in
    'linux')
        # Add Git PPA if not already present
        if ! find /etc/apt/sources.list.d/ -name 'git-core-ubuntu-ppa-*.list'; then
            sudo add-apt-repository -y ppa:git-core/ppa
        fi

        # Define Linux-specific packages
        linux_packages=(
            # Filesystem tools
            sshfs sshpass cifs-utils plocate silversearcher-ag
            # Shell and system admin tools
            jq moreutils apt-file bmon ncdu lnav
            # Development tools
            build-essential vim meld tig direnv exuberant-ctags
            unzip manpages-dev manpages-posix-dev cmake shellcheck
            # Fonts and UI
            fonts-firacode powerline powerline-gitstatus tmux
            # GUI
            diodon
        )
        packages+=("${linux_packages[@]}")
        ;;
    'mac')
        # Define macOS-specific packages
        mac_packages=(ctags python coreutils)
        packages+=("${mac_packages[@]}")
        ;;
esac

# Install all packages
install_pkg "${packages[@]}"

# Use ansible
ansible-playbook -i "localhost," -c local site.yml -vvv

#######################
## install vim plugins manager
#######################
mkdir -p ~/.backup
curl -fLo files/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# Setup  https://github.com/powerline/fonts
wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -P ~/.local/share/fonts/
wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -P ~/.config/fontconfig/conf.d/
fc-cache -vf ~/.local/share/fonts/

#######################
## install vim plugins
#######################
vim +PlugInstall +qall
find "$HOME/.vim/" -name \*.vim -exec dos2unix -q {} \;

#######################
## install tmux plugins
#######################
if [[ ! -d ~/.tmux/plugins/tpm ]]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
else
    (
        cd ~/.tmux/plugins/tpm || exit
        git pull --rebase
    )
fi

#######################
## Local changes
#######################
# Setup self default using rebase when pull
git config branch.master.rebase true

# patch fonts for powerline
[ "$1" = "x" ] && get fontconfig && fc-cache -vf ~/.fonts

# Daily Update dotfiles repo
if ! (crontab -l | grep -q git_update_dotfiles.bash); then
    crontab -l \
        | {
            cat
            echo "@daily $here/git_update_dotfiles.bash"
        } \
        | crontab -
fi

#######################
## Local fixes
#######################
rm -rf "$here/local"
if [[ -L ~/.local ]]; then
    rm ~/.local
fi

if [[ "$platform" == linux ]]; then
    gsettings set org.gnome.desktop.wm.preferences focus-new-windows 'smart'
fi
