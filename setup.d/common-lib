# shellcheck shell=bash
# vim: set et fenc=utf-8 ff=unix sts=4 sw=4 ts=8 :

function clean_up() {
    :
}

function errexit() {
    local err=$?
    set +o xtrace
    local code="${1:-1}"
    echo "Error in ${BASH_SOURCE[1]}:${BASH_LINENO[0]}. '${BASH_COMMAND}' exited with status $err"
    # Print out the stack trace described by $function_stack
    if [ ${#FUNCNAME[@]} -gt 2 ]; then
        echo "Call tree:"
        for ((i = 1; i < ${#FUNCNAME[@]} - 1; i++)); do
            echo " $i: ${BASH_SOURCE[$i + 1]}:${BASH_LINENO[$i]} ${FUNCNAME[$i]}(...)"
        done
    fi
    echo "Exiting with status ${code}"
    clean_up
    exit "${code}"
}

# 定義顏色
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

pass() {
    echo -e "${GREEN}[PASS]${NC} $1"
}

change() {
    echo -e "${YELLOW}[CHANGE]${NC} $1"
}

fail() {
    echo -e "${RED}[FAIL]${NC} $1"
}

source /etc/lsb-release

platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
	platform='linux'
elif [[ "$unamestr" == 'FreeBSD' ]]; then
	platform='freebsd'
elif [[ "$unamestr" == 'Darwin' ]]; then
	platform='mac'
fi

# trap ERR to provide an error handler whenever a command exits nonzero
#  this is a more verbose version of set -o errexit
trap 'errexit' ERR
# setting errtrace allows our ERR trap handler to be propagated to functions,
#  expansions and subshells
set -o errtrace
set -eE
